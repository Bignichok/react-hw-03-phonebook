{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/Filter/Filter.module.css","components/ContactList/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","ContactsListItem","name","number","onDeleteContact","type","onClick","ContactList","contacts","contactsListItems","map","id","key","ContactForm","state","handleChange","e","setState","target","value","handleSubmit","preventDefault","props","onAddContact","onSubmit","this","className","styles","phonebookForm","htmlFor","required","onChange","Component","Filter","filter","onChangeFilter","wrp","App","addContact","some","contact","alert","uuidv4","prevState","deleteContact","contactId","changeFilter","getVisibleContacts","toLowerCase","includes","localStorageContacts","localStorage","getItem","JSON","parse","prevProps","setItem","stringify","visibleContacts","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d68691ab.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"phonebookForm\":\"ContactForm_phonebookForm__K3Z2S\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrp\":\"Filter_wrp__3eVbO\"};","import React from \"react\";\r\n\r\nconst ContactsListItem = ({ name, number, onDeleteContact }) => {\r\n  return (\r\n    <li>\r\n      <p>\r\n        {name} {number}\r\n      </p>\r\n      <button type=\"button\" onClick={onDeleteContact}>\r\n        delete\r\n      </button>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default ContactsListItem;\r\n","import React from \"react\";\r\nimport ContactsListItem from \"./ContactListItem/ContactListItem\";\r\n\r\nconst ContactList = ({ contacts, onDeleteContact }) => {\r\n  const contactsListItems = contacts.map(({ id, name, number }) => {\r\n    return (\r\n      <ContactsListItem\r\n        key={id}\r\n        name={name}\r\n        number={number}\r\n        onDeleteContact={() => onDeleteContact(id)}\r\n      />\r\n    );\r\n  });\r\n  return <ul>{contactsListItems}</ul>;\r\n};\r\n\r\nexport default ContactList;\r\n","import React, { Component } from \"react\";\r\nimport styles from \"./ContactForm.module.css\";\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    name: \"\",\r\n    number: \"\",\r\n  };\r\n\r\n  handleChange = (e, type) => {\r\n    this.setState({\r\n      [type]: e.target.value,\r\n    });\r\n  };\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const { name, number } = this.state;\r\n    this.props.onAddContact(name, number);\r\n\r\n    this.setState({ name: \"\", number: \"\" });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit} className={styles.phonebookForm}>\r\n        <label htmlFor=\"\">\r\n          Name\r\n          <input\r\n            required\r\n            type=\"text\"\r\n            name=\"name\"\r\n            value={this.state.name}\r\n            onChange={(e) => this.handleChange(e, \"name\")}\r\n          />\r\n        </label>\r\n        <label htmlFor=\"\">\r\n          Number\r\n          <input\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            value={this.state.number}\r\n            required\r\n            onChange={(e) => this.handleChange(e, \"number\")}\r\n          />\r\n        </label>\r\n        <button type=\"submit\">Add contact</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ContactForm;\r\n","import React from \"react\";\r\nimport styles from \"./Filter.module.css\";\r\n\r\nconst Filter = ({ filter, onChangeFilter }) => {\r\n  return (\r\n    <div className={styles.wrp}>\r\n      <label>\r\n        Find Contacts by name\r\n        <input\r\n          type=\"text\"\r\n          value={filter}\r\n          onChange={(e) => onChangeFilter(e.target.value)}\r\n        />\r\n      </label>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Filter;\r\n","import React, { Component } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport \"./App.css\";\nimport ContactList from \"./components/ContactList/ContactList\";\nimport ContactForm from \"./components/ContactForm/ContactForm\";\nimport Filter from \"./components/Filter/Filter\";\n\nclass App extends Component {\n  state = {\n    contacts: [],\n    filter: \"\",\n    name: \"\",\n    number: \"\",\n  };\n\n  componentDidMount() {\n    const localStorageContacts = localStorage.getItem(\"contacts\");\n    if (localStorageContacts) {\n      this.setState({ contacts: JSON.parse(localStorageContacts) });\n    }\n  }\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.contacts !== this.state.contacts) {\n      localStorage.setItem(\"contacts\", JSON.stringify(this.state.contacts));\n    }\n  }\n\n  addContact = (name, number) => {\n    const { contacts } = this.state;\n\n    if (contacts.some((contact) => contact.name === name)) {\n      return alert(`${name} is already in contacts`);\n    } else {\n      const contact = {\n        id: uuidv4(),\n        name: name,\n        number: number,\n      };\n      this.setState((prevState) => {\n        return {\n          contacts: [...prevState.contacts, contact],\n        };\n      });\n    }\n  };\n\n  deleteContact = (contactId) => {\n    this.setState((prevState) => {\n      return {\n        contacts: prevState.contacts.filter((contact) => contact.id !== contactId),\n      };\n    });\n  };\n\n  changeFilter = (filter) => {\n    this.setState({ filter });\n  };\n\n  getVisibleContacts = () => {\n    const { contacts, filter } = this.state;\n    return contacts.filter((contact) =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  };\n\n  render() {\n    const { filter, contacts } = this.state;\n    const visibleContacts = this.getVisibleContacts();\n\n    return (\n      <div className=\"App\">\n        <h1>Phonebook</h1>\n        <ContactForm onAddContact={this.addContact} />\n\n        {contacts.length > 0 && (\n          <section>\n            <h2>Contacts</h2>\n\n            {contacts.length > 1 && (\n              <Filter value={filter} onChangeFilter={this.changeFilter} />\n            )}\n            {contacts.length > 1 && visibleContacts.length === 0 && (\n              <p>no results were found for your search</p>\n            )}\n\n            <ContactList\n              contacts={visibleContacts}\n              onDeleteContact={this.deleteContact}\n            />\n          </section>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}